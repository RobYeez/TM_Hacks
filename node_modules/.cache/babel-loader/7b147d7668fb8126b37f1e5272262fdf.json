{"ast":null,"code":"'use strict';\n\nvar testOrder;\nvar types = {};\nvar customCards = {};\nvar VISA = 'visa';\nvar MASTERCARD = 'master-card'; // TODO: rename to mastercard in major version bunmp\n\nvar AMERICAN_EXPRESS = 'american-express';\nvar DINERS_CLUB = 'diners-club';\nvar DISCOVER = 'discover';\nvar JCB = 'jcb';\nvar UNIONPAY = 'unionpay';\nvar MAESTRO = 'maestro';\nvar MIR = 'mir';\nvar CVV = 'CVV';\nvar CID = 'CID';\nvar CVC = 'CVC';\nvar CVN = 'CVN';\nvar CVP2 = 'CVP2';\nvar ORIGINAL_TEST_ORDER = [VISA, MASTERCARD, AMERICAN_EXPRESS, DINERS_CLUB, DISCOVER, JCB, UNIONPAY, MAESTRO, MIR];\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) {\n    return null;\n  }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n  delete dupe.prefixPattern;\n  delete dupe.exactPattern;\n  return dupe;\n}\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\ntypes[VISA] = {\n  niceType: 'Visa',\n  type: VISA,\n  prefixPattern: /^4$/,\n  exactPattern: /^4\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[MASTERCARD] = {\n  niceType: 'Mastercard',\n  type: MASTERCARD,\n  prefixPattern: /^(5|5[1-5]|2|22|222|222[1-9]|2[3-6]|27|27[0-2]|2720)$/,\n  exactPattern: /^(5[1-5]|222[1-9]|22[3-9]|2[3-6]|27[0-1]|2720)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\ntypes[AMERICAN_EXPRESS] = {\n  niceType: 'American Express',\n  type: AMERICAN_EXPRESS,\n  prefixPattern: /^(3|34|37)$/,\n  exactPattern: /^3[47]\\d*$/,\n  isAmex: true,\n  gaps: [4, 10],\n  lengths: [15],\n  code: {\n    name: CID,\n    size: 4\n  }\n};\ntypes[DINERS_CLUB] = {\n  niceType: 'Diners Club',\n  type: DINERS_CLUB,\n  prefixPattern: /^(3|3[0689]|30[0-5])$/,\n  exactPattern: /^3(0[0-5]|[689])\\d*$/,\n  gaps: [4, 10],\n  lengths: [14, 16, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[DISCOVER] = {\n  niceType: 'Discover',\n  type: DISCOVER,\n  prefixPattern: /^(6|60|601|6011|65|64|64[4-9])$/,\n  exactPattern: /^(6011|65|64[4-9])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 19],\n  code: {\n    name: CID,\n    size: 3\n  }\n};\ntypes[JCB] = {\n  niceType: 'JCB',\n  type: JCB,\n  prefixPattern: /^(2|21|213|2131|1|18|180|1800|3|35)$/,\n  exactPattern: /^(2131|1800|35)\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\ntypes[UNIONPAY] = {\n  niceType: 'UnionPay',\n  type: UNIONPAY,\n  prefixPattern: /^((6|62|62\\d|(621(?!83|88|98|99))|622(?!06)|627[02,06,07]|628(?!0|1)|629[1,2])|622018)$/,\n  exactPattern: /^(((620|(621(?!83|88|98|99))|622(?!06|018)|62[3-6]|627[02,06,07]|628(?!0|1)|629[1,2]))\\d*|622018\\d{12})$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVN,\n    size: 3\n  }\n};\ntypes[MAESTRO] = {\n  niceType: 'Maestro',\n  type: MAESTRO,\n  prefixPattern: /^(5|5[06-9]|6\\d*)$/,\n  exactPattern: /^(5[06-9]|6[37])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\ntypes[MIR] = {\n  niceType: 'Mir',\n  type: MIR,\n  prefixPattern: /^(2|22|220|220[0-4])$/,\n  exactPattern: /^(220[0-4])\\d*$/,\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVP2,\n    size: 3\n  }\n};\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction creditCardType(cardNumber) {\n  var type, value, i;\n  var prefixResults = [];\n  var exactResults = [];\n\n  if (!(typeof cardNumber === 'string' || cardNumber instanceof String)) {\n    return [];\n  }\n\n  for (i = 0; i < testOrder.length; i++) {\n    type = testOrder[i];\n    value = findType(type);\n\n    if (cardNumber.length === 0) {\n      prefixResults.push(clone(value));\n      continue;\n    }\n\n    if (value.exactPattern.test(cardNumber)) {\n      exactResults.push(clone(value));\n    } else if (value.prefixPattern.test(cardNumber)) {\n      prefixResults.push(clone(value));\n    }\n  }\n\n  return exactResults.length ? exactResults : prefixResults;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  MIR: MIR\n};\nmodule.exports = creditCardType;","map":null,"metadata":{},"sourceType":"script"}